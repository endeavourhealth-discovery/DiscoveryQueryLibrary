-- ----------------------------------------------------------------
-- Procedure to append an observation of choice to a table of choice v2.0
-- Version 2.0 is extensible to allow selection of input cohorts and input obs tables
-- ----------------------------------------------------------------

-- INPUTS:
-- 1. mixed_code - a string containing comma-separated list of SNOMED CODES ONLY (for now)
-- 2. this_column_name - a string defining the name of the appended column
-- 3. table_to_modify - the table to add this information to
-- 3. input_cohort - a table containing all the patients of interest
-- 4. input_observations - a table containing all the observations of interest (as generated by f50_get_all_obs_on_cohort, French et al., 2019)

-- OUTPUTS:
-- 1. A table, as defined by 'table to modify' with appended observations of interest

use data_extracts;
drop procedure if exists F50_join_to_observation;

DELIMITER //
create procedure F50_join_to_observation
(
    in mixed_codes varchar (5000),
    in this_column_name varchar (32),
    in table_to_modify varchar (32),
    in input_cohort varchar(32),
    in input_observations varchar(32)
)

BEGIN

SET @min_column_name = CONCAT(this_column_name,'_earliest');
SET @max_column_name = CONCAT(this_column_name,'_latest');
SET @count_column_name = CONCAT(this_column_name,'_count');
SET @mixed_codes = mixed_codes;
SET @table_to_modify = table_to_modify;
SET @input_cohort = input_cohort; -- Does this need to happen? Unsure
SET @input_observations = input_observations;

-- print our what obs we're working on
select CONCAT(this_column_name,' - RUNNING...') as status_update;

-- ------------------------------------------------------
-- batch up and run to get the observations
-- ------------------------------------------------------

call F50_add_obs_column_batched
		(
			-- batch size
            2500
            -- codes
		,	@mixed_codes
            -- parameters for batch procedure (French et al.)
        ,   @input_cohort
        ,   @input_observations
		);

-- ------------------------------------------------------
-- Join latest set of observations to cohort
-- ------------------------------------------------------

SET @statement = 'drop table if exists latest_observations;';
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

SET @statement = CONCAT('create temporary table latest_observations as
select a.patient_id
,	min(obs.clinical_effective_date) as ',@min_column_name,'
,   max(obs.clinical_effective_date) as ',@max_column_name,'
,	count(obs.clinical_effective_date) as ',@count_column_name,'
from ',input_cohort,' as a
left join F50_obs_out_tmp as obs
	on a.patient_id = obs.patient_id
group by patient_id;');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

SET @statement = 'alter table latest_observations add index (patient_id);';
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

-- ------------------------------------------------------
-- Add to observations master table
-- ------------------------------------------------------

SET @statement = CONCAT('drop table if exists ',table_to_modify,';');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

SET @statement = CONCAT('create table ',table_to_modify,' as
select a.*
,	b.',@min_column_name,'
, 	b.',@max_column_name,'
from ',table_to_modify,'_temp  as a
left outer join latest_observations as b
	on a.patient_id = b.patient_id;');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

SET @statement = CONCAT('alter table ',table_to_modify,' add index (patient_id);');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

-- ------------------------------------------------------
-- update temp table
-- ------------------------------------------------------

SET @statement = CONCAT('drop table if exists ',table_to_modify,'_temp;');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

SET @statement = CONCAT('create table ',table_to_modify,'_temp as select * from ',table_to_modify,';');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;

SET @statement = CONCAT('alter table ',table_to_modify,'_temp add index (patient_id);');
PREPARE STATEMENT FROM @statement; EXECUTE STATEMENT;


-- ------------------------------------------------------
-- print completion message
-- ------------------------------------------------------
select CONCAT(this_column_name,' - COMPLETE') as status_update;

END
// DELIMITER ;
